//////////////////////////////////////////////////////////////////////////////
// Relations imported from ddisasm's exported facts

.decl binary_format(Format:symbol)
.input binary_format

.decl binary_isa(isa:symbol)
.input binary_isa

.decl op_indirect(code:operand_code, reg1:register, reg2:register, reg3:register,
        multiplier:number, offset:number, size_value:unsigned)
.input op_indirect

.decl instruction(ea:address, size:unsigned, prefix:symbol, opcode:symbol,
          op1:operand_code, op2:operand_code, op3:operand_code, op4:operand_code,
          immOffset:unsigned,displacementOffset:unsigned)
.input instruction

.decl op_regdirect_contains_reg(op:operand_code, reg:register)
.input op_regdirect_contains_reg

.decl op_register_bitfield(code:operand_code, register_name:register)
.input op_register_bitfield

.decl op_immediate(code:operand_code, offset:number)
.input op_immediate

.decl op_regdirect(code:operand_code,register_name:register)
.input op_regdirect

.decl code_in_refined_block(ea:address, block:address)
.input code_in_refined_block

.decl function_symbol(ea:address, name:symbol)
.input function_symbol

.decl def_used(ea_def:address, reg:register, ea_used:address, index_used:operand_index)
.input def_used

.decl cfg_edge(src:address, dest:address, conditional:symbol, indirect:symbol, type:symbol)
.input cfg_edge

.decl reg_call(src:address, reg:register)
.input reg_call

.decl data_access(EA:address, Op_index:operand_index, RegSegment:register, RegBase:register, RegIndex:register, Mult:number, Offset:number, Size:unsigned)
.input data_access

.decl reg_stored_in_stack(EA:address, Reg:register, StackPos:number, StackFrameDefinedAt: address)
.input reg_stored_in_stack

.decl reg_loaded_from_stack(EA:address, Reg:register, Base:register, StackPos:number, StackFrameDefinedAt: address)
.input reg_loaded_from_stack

.comp abs_arch {
    .decl pointer_size(N: unsigned)
    .input pointer_size

    .decl mov(EA:address)
    .input mov

    .decl read_only_operation(Operation:symbol)
    .input read_only_operation

    .decl pc_register(reg:register)
    .input pc_register

    .decl frame_pointer(reg:register)
    .input frame_pointer

    .decl stack_pointer(reg:register)
    .input stack_pointer

    .decl arithmetic_operation(Operation:symbol)
    .input arithmetic_operation

    .decl call_operation(Operation:symbol)
    .input call_operation

    .decl logic_operation(Operation:symbol)
    .input logic_operation

    .decl cmp_operation(Operation:symbol)
    .input cmp_operation

    .decl conditional(EA:address)
    .input conditional

    .decl jump(EA:address)
    .input jump

    .decl return(src:address)
    .input return

    .decl track_register(reg1:register,reg2:register)
    .input track_register

    .decl move_operation(Operation:symbol)
    .input move_operation

    .decl reg_arithmetic_operation(EA:address,Dst:register,Src:register,Mult:number,Offset:number)
    .input reg_arithmetic_operation

    .decl store_operation(Operation:symbol)
    .input store_operation

    .decl op_does_not_read_dest_reg(Operation:symbol)
    .input op_does_not_read_dest_reg

    .decl write_only_operation(Operation:symbol)
    .input write_only_operation

    .decl one_op_write(Operation:symbol)
    .input one_op_write

    .decl delay_slot(BranchEA:address,EA:address)
    .input delay_slot

    .decl halt_operation(Operation:symbol)
    .input halt_operation
}

.init arch = abs_arch

.comp abs_function_inference {
    .decl in_function(Block:address, Function:address)
    .input in_function
}

.init function_inference = abs_function_inference

.decl symbolic_operand(ea:address, index:operand_index, value:address, type:symbol)
.input symbolic_operand

.decl op_indirect_contains_reg(op:operand_code,reg:register)
.input op_indirect_contains_reg

//////////////////////////////////////////////////////////////////////////////
// Relations directly using the same implementation from ddisasm, but we compute
// them locally so as not to blow up the size of the output of ddisasm. This is
// however not all the relations we are recomputing from ddisasm, ones that are
// the same relation but computed in a different way than the source are
// computed in other files, that are organized with respect to the nature of the
// relation. This is so that if we need to check which relations may need to be
// updated from the ddisasm source, it should only be these following relations
.decl instruction_get_operation(ea:address, operation:symbol)

instruction_get_operation(EA,Operation):-
    instruction(EA,_,_,Operation,_,_,_,_,_,_).

.decl instruction_get_op(ea:address, index:operand_index, operator:operand_code)

instruction_get_op(EA,Index,Op):-
    instruction(EA,_,_,_,Op1,Op2,Op3,Op4,_,_),
    (
        Op1 != 0,
        Op = Op1, Index = 1,
        Op2 = Op2, Op3 = Op3, Op4 = Op4 // avoid warning
        ;
        Op2 != 0,
        Op = Op2, Index = 2,
        Op1 = Op1, Op3 = Op3, Op4 = Op4 // avoid warning
        ;
        Op3 != 0,
        Op = Op3, Index = 3,
        Op1 = Op1, Op2 = Op2, Op4 = Op4 // avoid warning
        ;
        Op4 != 0,
        Op = Op4, Index = 4,
        Op1 = Op1, Op2 = Op2, Op3 = Op3 // avoid warning
    ).

.decl instruction_get_src_op(ea:address, Index:operand_index, op:operand_code)

instruction_get_src_op(EA,2,Op):-
    arch.store_operation(Operation),
    instruction(EA,_,_,Operation,_,Op,0,0,_,_).

//when the dest is used as a source as well
instruction_get_src_op(EA,Index,Op2):-
    instruction(EA,_,_,Operation,_,Op2,_,_,_,_),Op2 != 0,
    Index = 2,
    !arch.mov(EA),
    !arch.op_does_not_read_dest_reg(Operation),
    !arch.write_only_operation(Operation).

instruction_get_src_op(EA,Index,Op):-
    !arch.store_operation(Operation),
    (
        instruction(EA,_,_,Operation,Op,_,_,_,_,_), Op != 0, Index = 1;
        instruction(EA,_,_,Operation,_,Op,Op3,_,_,_), Op != 0, Op3 != 0, Index = 2;
        instruction(EA,_,_,Operation,_,_,Op,Op4,_,_), Op != 0, Op4 != 0, Index = 3
    ),
    !arch.write_only_operation(Operation).

.decl instruction_get_dest_op(ea:address, index:number, op:operand_code)

instruction_get_dest_op(EA,1,Op):-
    arch.store_operation(Operation),
    instruction(EA,_,_,Operation,Op,_,_,_,_,_).

instruction_get_dest_op(EA,Index,Op):-
    !arch.store_operation(Operation),
    instruction(EA,_,_,Operation,_,Op2,Op3,Op4,_,_),
    !arch.read_only_operation(Operation),
    (
        Op4 = 0,
        Op3 = 0,
        Op2 != 0,
        Op = Op2,
        Index = 2
        ;
        Op4 = 0,
        Op3 != 0,
        Op = Op3,
        Index = 3,
        Op2 = Op2 // avoid warning
        ;
        Op4 != 0,
        Op = Op4,
        Index = 4,
        Op2 = Op2, Op3 = Op3 // avoid warning
    ).

instruction_get_dest_op(EA,1,Op):-
    instruction(EA,_,_,Operation,Op,0,0,0,_,_),
    arch.one_op_write(Operation).

.decl next(n:address,m:address)

next(EA,EA+Size):-
    instruction(EA,Size,_,_,_,_,_,_,_,_).


.decl unconditional_return(EA:address)

unconditional_return(EA):-
    arch.return(EA),
    !arch.conditional(EA).

.decl unconditional_jump(n:address)

unconditional_jump(EA):-
    arch.jump(EA),
    !arch.conditional(EA).

.decl halt(EA:address)

halt(EA):-
    arch.halt_operation(Operation),
    instruction_get_operation(EA,Operation).

.decl may_fallthrough(o:address,d:address)

// Branch with a delay-slot can always fallthrough
may_fallthrough(From,To):-
    next(From,To),
    arch.delay_slot(From,To).

// Delay-slot can fallthrough if the corresponding branch is not unconditional
// or a return.
may_fallthrough(From,To):-
    next(From,To),
    arch.delay_slot(Prev,From),
    !unconditional_return(Prev),
    !unconditional_jump(Prev).

// Common case
may_fallthrough(From,To):-
    next(From,To),
    !arch.delay_slot(_,From),
    !unconditional_return(From),
    !unconditional_jump(From),
    !halt(From),
    !no_return_call(From).
