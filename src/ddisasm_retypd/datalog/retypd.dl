#include "types.dl"
#include "external.dl"

#include "arch.dl"
#include "callingconv.dl"
#include "callgraph.dl"
#include "dataflow.dl"
#include "def_use.dl"
#include "signature.dl"
#include "stack_tracker.dl"
#include "subtypes.dl"

#ifdef DEBUG
#include "debug.dl"
#endif

// Filter the name to prevent retypd constraints containing invalid chars
.decl filter_name(filtered:symbol, unfiltered:symbol)
filter_name(Filt, Unfilt) :-
    function_inference.function_entry_name(Func_addr, Unfilt),
    (
        (contains(".", Unfilt); contains("@", Unfilt)),
        Filt=cat("FUN_", to_string(Func_addr))
        ;
        Func_addr=Func_addr, // Suppress warning in souffle
        !(contains(".", Unfilt); contains("@", Unfilt)),
        Filt=Unfilt
    ),
    Filt!="FUN_0".

//////////////////////////////////////////////////////////////////////////////
// subtype constraint generation from subtype relationships generated in
// subtypes.dl. These are strings parsable by the retypd constraint parser.
.decl subtype_strings(func:symbol, ea:address, constraint:symbol, reason:symbol)
subtype_strings(Func, EA, Constraint, Reason) :-
    subtype(Func, $Subtype(Lhs, Rhs), EA, Reason),
    path_string(Lhs, LhsStr),
    path_string(Rhs, RhsStr),
    Constraint=cat(LhsStr, " <= ", RhsStr).

.decl subtype_constraint(func:symbol, constraint:symbol, reason: symbol)
.output subtype_constraint

subtype_constraint(Func, Constraint, Reason) :-
    subtype_strings(Func, _, Constraint, Reason).


//////////////////////////////////////////////////////////////////////////////
// These relations are used for flattening the ADT constraints. This is because
// we directly emit a deeply nested ADT directly in the subtype relation, whose
// component pieces have not been described in a table, and thus can not be
// independently enumerated. By flattening them out in these tables we can then
// iterate through them and convert them to parsable strings for the final
// constraint string.
.decl all_paths(path:Path)
all_paths(Path) :-
    (
        subtype(_, $Subtype(Path, _), _, _)
        ;
        subtype(_, $Subtype(_, Path), _, _)
    ).

.decl all_typevars(typevar:TypeVar)
all_typevars(TypeVar) :-
    all_paths([TypeVar, _]).

.decl all_labellists(labellist:LabelList)
all_labellists(LabelList) :-
    all_paths([_, LabelList]).

all_labellists(Next) :-
    all_labellists([_, Next]).

.decl all_labels(label:Label)
all_labels(Label) :-
    all_labellists([Label, _]).


//////////////////////////////////////////////////////////////////////////////
// These relations are responsible for taking the flattened output from above
// and generating the appropriately parsable strings for retypd constraints
.decl path_string(path:Path, string:symbol)
path_string([TypeVar, LabelList], Str) :-
    all_paths([TypeVar, LabelList]),
    typevar_string(TypeVar, TypeVarStr),
    labellist_string(LabelList, LabelListStr),
    Str=cat(TypeVarStr, LabelListStr).

.decl typevar_string(typevar:TypeVar, string:symbol)
typevar_string($RegAt(Reg, EA), Str) :-
    all_typevars($RegAt(Reg, EA)),
    Str=cat(Reg, "_", to_string(EA)).

typevar_string($Global(Global), Str) :-
    all_typevars($Global(Global)),
    filter_name(Global, Filtered),
    Str=Filtered.

typevar_string($Sink(Sink), Str) :-
    all_typevars($Sink(Sink)),
    Str=Sink.

.decl labellist_string(labellist:LabelList, string:symbol)
labellist_string(nil, "").

labellist_string([Next, Rest], Str) :-
    all_labellists([Next, Rest]),
    label_string(Next, LabelStr),
    labellist_string(Rest, RestStr),
    Str=cat(LabelStr, RestStr).

.decl label_string(label:Label, string:symbol)
label_string($In(Index), Str) :-
    all_labels($In(Index)),
    Str=cat(".in_", to_string(Index - 1)).

label_string($Out(), ".out").
label_string($Store(), ".store").
label_string($Load(), ".load").

label_string($Deref(Size, Offset), Str) :-
    all_labels($Deref(Size, Offset)),
    Str=cat(".Ïƒ", to_string(Size), "@", to_string(Offset)).
