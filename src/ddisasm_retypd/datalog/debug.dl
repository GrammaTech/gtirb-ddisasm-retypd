.decl debug_ea_no_subtype(ea:address, func:symbol, opcode:symbol)
debug_ea_no_subtype(EA, Func, Opcode) :-
    block_instruction(EA, Block),
    !arch.jump(EA),
    !arch.return(EA),
    instruction_get_operation(EA, Opcode),
    function_inference.in_function(Block, Func_addr),
    function_symbol(Func_addr, Func),
    !subtype_reg(_, EA, _, _),
    !subtype_def_use(_, EA, _, _),
    !subtype_def_use(_, _, _, EA),
    !subtype_reg_typesink(_, EA, _, _),
    !subtype_mem_reg(_, _, EA, _, _, _, _),
    !subtype_param_reg_read(_, EA, _, _),
    !subtype_param_reg_write(_, EA, _, _, _),
    !subtype_called(_, EA, _).

.decl comment(EA:address, comment:symbol, category:symbol)
.output comment
comment(EA, Comment, "subtype") :-
    debug_ea_no_subtype(EA, _, _),
    Comment=cat("NO CONSTRAINTS").

comment(EA, Comment, "subtype") :-
    subtype_def_use(Func, EA_def, Reg, EA),
    Comment=cat("subtype_def_use(Func=", Func, ", EA_def=", to_string(EA_def), ", Reg=", Reg, ", EA_used=", to_string(EA), ")").

comment(EA, Comment, "subtype") :-
    subtype_reg(Func, EA, Reg_src, Reg_dest),
    Comment=cat("subtype_reg(Func=", Func, ", EA=", to_string(EA), ", Reg_src=", Reg_src, ", Reg_dest=", Reg_dest, ")").

comment(EA, Comment, "subtype") :-
    subtype_reg_typesink(Func, EA, Reg, Sink),
    Comment=cat("subtype_reg_typesink(Func=", Func, ", EA=", to_string(EA), ", Reg=", Reg, ", Sink=", Sink, ")").

comment(EA, Comment, "dataflow") :-
    memory_access(Mode, EA, Base, Offset, NBytes),
    Comment=cat("memory_access(Mode=", Mode, ", EA=", to_string(EA), ", Base=", Base, ", Offset=", to_string(Offset), ", NBytes=", to_string(NBytes), ")").

comment(EA, Comment, "subtype") :-
    subtype_mem_reg(Mode, Func, EA, Reg, Base, Offset, NBytes),
    Comment=cat("subtype_mem_reg(Mode=", Mode, ", Func=", Func, ", EA=", to_string(EA), ", Reg=", Reg, ", Base=", Base, ", Offset=", to_string(Offset), ", NBytes=", to_string(NBytes), ")").

comment(EA, Comment, "subtype") :-
    subtype_mem_sink(Mode, Func, EA, Base, Offset, NBytes, Sink),
    Comment=cat("subtype_mem_sink(Mode=", Mode, ", Func=", Func, ", EA=", to_string(EA), ", Base=", Base, ", Offset=", to_string(Offset), ", NBytes=", to_string(NBytes), ", Sink=", Sink, ")").


comment(EA, Comment, "subtype") :-
    subtype_param_reg_read(Func, EA, Reg, Index),
    Comment=cat("subtype_param_reg_read(Func=", Func, ", EA=", to_string(EA), ", Reg=", Reg, ", Index=", to_string(Index), ")").

comment(EA, Comment, "subtype") :-
    subtype_param_reg_write(Func, EA, Reg, Callee, Index),
    Comment=cat("subtype_param_reg_write(Func=", Func, ", EA=", to_string(EA), ", Reg=", Reg, ", Callee=", Callee, ", Index=", to_string(Index)).

comment(EA, Comment, "subtype") :-
    subtype_param_pass(Func, Callee, Index),
    function_symbol(EA, Func),
    Comment=cat("subtype_param_pass(Func=", Func, ", Callee=", Callee, ", Index=", to_string(Index), ")").

comment(EA, Comment, "params") :-
    writes_return_value(Func, EA),
    Comment=cat("writes_return_value(Func=", Func, ", EA=", to_string(EA), ")").

comment(EA, Comment, "params") :-
    writes_read_return_value(Func, EA, EA_use),
    Comment=cat("writes_read_return_value(Func=", Func, ", EA_def=", to_string(EA), ", EA_use=", to_string(EA_use), ")").

comment(EA, Comment, "params") :-
    write_implicit_return_value(Func, ReturnedFunc, EA, EA_use),
    Comment=cat("write_implicit_return_value(Func=", Func, ", ReturnedFunc=", ReturnedFunc, ", EA_ret=", to_string(EA), ", EA_use=", to_string(EA_use), ")").

comment(EA, Comment, "params") :-
    writes_unread_return_value(Func, EA),
    Comment=cat("writes_unread_return_value(Func=", Func, ", EA_def=", to_string(EA), ")").

comment(EA, Comment, "params") :-
    reads_return_value(Caller, Callee, EA),
    Comment=cat("reads_return_value(Caller=", Caller, ", Callee=", Callee, ", EA_use=", to_string(EA)).

comment(EA, Comment, "subtype") :-
    subtype_called(Func, EA, Reg),
    Comment=cat("subtype_called(Func=", Func, ", EA=", to_string(EA), ", Reg=", Reg, ")").

comment(EA, Comment, "stack") :-
    stack_pointer_tracking(EA, Reg, Depth),
    Comment=cat(Reg, " = Stack@", to_string(Depth)).

comment(EA, Comment, "arithmetic") :-
    arch.reg_arithmetic_operation(EA, Dst, Src, Mult, Offset),
    Comment=cat(Dst, " = ", Src, "*", to_string(Mult), " + ", to_string(Offset)).

comment(EA, Comment, "def-use") :-
    reg_def_use.def(EA, Reg),
    Comment=cat("def(", Reg, ")").

comment(EA, Comment, "def-use") :-
    reg_def_use.use(EA, Reg),
    Comment=cat("use(", Reg, ")").

comment(EA, Comment, "def-use") :-
    reg_def_use.def_use(EA, Reg, EA_to),
    Comment=cat("def_use(From=", to_string(EA), ", Reg=", Reg, ", To=", to_string(EA_to), ")").

comment(EA, Comment, "dataflow") :-
    local_next(EA, EA_next),
    Comment=cat("local_next(EA=", to_string(EA), ", EA_next=", to_string(EA_next), ")").

comment(EA, Comment, "dataflow") :-
    block_next(EA, EA_next),
    Comment=cat("block_next(EA=", to_string(EA), ", EA_next=", to_string(EA_next), ")").

comment(EA, Comment, "dataflow") :-
    next_instruction(EA, EA_next),
    Comment=cat("next_instruction(EA=", to_string(EA), ", EA_next=", to_string(EA_next), ")").

comment(EA, Comment, "dataflow") :-
    reaches_without_write(EA, Reg),
    Comment=cat("reaches_without_write(", to_string(EA), ", ", Reg, ")").

comment(EA, Comment, "sink") :-
    typesink(EA, Side, Sink, Reason),
    Comment=cat("typesink(EA=", to_string(EA), ", Side=", Side, ", Sink=", Sink, ", Reason=", Reason,   ")").
