.comp AbstractDefUse<T> {
    .decl def(EA:address, Object:T) overridable
    .decl use(EA:address, Object:T) overridable
    .decl flows_to(EA_from:address, EA_to:address) overridable

    .decl def_flows_to(EA_origin:address, EA_def:address, EA_flowed:address, Object:T)
    // A value Object from Origin flows From -> To if Origin defines it, and
    // Origin flows to a location To which does not define it. This is the base
    // step that is then built off of by the next rule.
    def_flows_to(EA_origin, EA_from, EA_to, Object) :-
        def(EA_from, Object),
        flows_to(EA_from, EA_to),
        EA_origin=EA_from.

    // A value Object from Origin flows From -> To if Origin defines it, and
    // there exists a definition that flows to From, and From flows to To, which
    // cannot itself kill Object.
    def_flows_to(EA_origin, EA_from, EA_to, Object) :-
        def_flows_to(EA_origin, _, EA_from, Object),
        !def(EA_from, Object),
        flows_to(EA_from, EA_to).

    // A value Object has a definition at EA_def which is alive at point EA_use
    .decl reaches(EA_def:address, Object:T, EA_use:address)
    reaches(EA_def, Object, EA_use) :-
        def_flows_to(EA_def, _, EA_use, Object).

    // A value Object has a definition at EA_def which is read at point EA_use
    .decl def_use(EA_def:address, Object:T, EA_use:address)
    def_use(EA_def, Object, EA_use) :-
        reaches(EA_def, Object, EA_use),
        use(EA_use, Object).
}

.comp RegisterDefUse : AbstractDefUse<register> {
    .override def
    def(EA, Object) :-
        register_access(EA, "Writes", Object).

    .override use
    use(EA, Object) :-
        register_access(EA, "Reads", Object).

    .override flows_to
    flows_to(EA_from, EA_to) :-
        next_instruction(EA_from, EA_to).
}

.init reg_def_use = RegisterDefUse
