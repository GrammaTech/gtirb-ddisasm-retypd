.decl subtype(func:symbol, constraint:Constraint, EA:address, reason:symbol)
.output subtype

// Generate subtype relationships between registers moved between each other,
// e.g.:
//     EA: mov Reg_dest, Reg_src
subtype(
    Func,
    $Subtype(
        [$RegAt(Reg_src, EA), nil],
        [$RegAt(Reg_dest, EA), nil]
    ),
    EA,
    "register-to-register"
) :-
    move_instruction(EA),

    // Src
    instruction_get_src_op(EA, _, SrcOp),
    op_regdirect(SrcOp, SrcReg_untracked),
    track_register(SrcReg_untracked, Reg_src),
    !pc_register(Reg_src),

    // Dest
    instruction_get_dest_op(EA, _, DestOp),
    op_regdirect(DestOp, DestReg_untracked),
    track_register(DestReg_untracked, Reg_dest),
    !pc_register(Reg_dest),

    Reg_dest != Reg_src,

    // Find Func
    block_instruction(EA, Block),
    function_inference.in_function(Block, Func_addr),
    function_inference.function_entry_name(Func_addr, Func).

// Connect def and used for reg E.g.,
//   EA_def:  mov Reg, xxx
//   ...
//   EA_used: add yyy, Reg
subtype(
    Func,
    $Subtype(
        [$RegAt(Reg, EA_def), nil],
        [$RegAt(Reg, EA_used), nil]
    ),
    EA_def,
    "def-to-use"
) :-
    reg_def_use.def_use(EA_def, Reg_untracked, EA_used),
    EA_def != EA_used,
    track_register(Reg_untracked, Reg),

    block_instruction(EA_def, Block),
    function_inference.in_function(Block, Func_addr),
    function_inference.function_entry_name(Func_addr, Func).

// Generate type sink information for registers at a given EA.
subtype(Func, $Subtype(lhs, rhs), EA, "register-to-sink") :-
    (
        typesink(EA, "DEST", Sink, _),
        instruction_get_dest_op(EA, _, Op),
        op_regdirect(Op, Reg_untracked),
        lhs = [$Sink(Sink), nil],
        rhs = [$RegAt(Reg, EA), nil]
        ;
        typesink(EA, "SRC", Sink, _),
        instruction_get_src_op(EA, _, Op),
        op_regdirect(Op, Reg_untracked),
        lhs = [$RegAt(Reg, EA), nil],
        rhs = [$Sink(Sink), nil]
    ),

    track_register(Reg_untracked, Reg),
    !pc_register(Reg),

    // Find Func
    block_instruction(EA, Block),
    function_inference.in_function(Block, Func_addr),
    function_inference.function_entry_name(Func_addr, Func).

// Memory access subtype relations, e.g. (in the case of Mode="store"):
//     EA_base_def:   mov Reg, ***
//     ...
//     EA:            mov nbyte [Base+Offset], Reg
// subtype_mem_reg(Mode, Func, EA, Reg, Base, Offset, NBytes):-
subtype(Func, $Subtype(lhs, rhs), EA, "register-to-memory") :-
    move_instruction(EA),
    memory_access(Mode, EA, Base, Offset, NBytes),
    (
        Mode="load",
        instruction_get_dest_op(EA, _, Op),
        op_regdirect(Op, Reg_untracked),
        track_register(Reg_untracked, Reg),
        lhs = [$RegAt(Base, EA), [$Load(), [$Deref(NBytes, Offset), nil]]],
        rhs = [$RegAt(Reg, EA), nil]
        ;
        Mode="store",
        instruction_get_src_op(EA, _, Op),
        op_regdirect(Op, Reg_untracked),
        track_register(Reg_untracked, Reg),
        lhs = [$RegAt(Reg, EA), nil],
        rhs = [$RegAt(Base, EA), [$Store(), [$Deref(NBytes, Offset), nil]]]
    ),

    block_instruction(EA, Block),
    function_inference.in_function(Block, Func_addr),
    function_inference.function_entry_name(Func_addr, Func).

// Memory access to type sink relations
subtype(Func, $Subtype(lhs, rhs), EA, "memory-to-sink") :-
    memory_access(Mode, EA, Base, Offset, NBytes),
    (
        Mode="load",
        typesink(EA, "SRC", Sink, _),
        lhs = [$RegAt(Base, EA), [$Load(), [$Deref(NBytes, Offset), nil]]],
        rhs = [$Sink(Sink), nil]
        ;
        Mode="store",
        typesink(EA, "DEST", Sink, _),
        lhs = [$Sink(Sink), nil],
        rhs = [$RegAt(Base, EA), [$Store(), [$Deref(NBytes, Offset), nil]]]
    ),
    block_instruction(EA, Block),
    function_inference.in_function(Block, Func_addr),
    function_inference.function_entry_name(Func_addr, Func).

// Connect incoming formal arguments to their local uses intraprocedurally
subtype(
    Func,
    $Subtype(
        [$Global(Func), [$In(Index), nil]],
        [$RegAt(Reg, EA_use), nil]
    ),
    EA_use,
    "param-to-register"
) :-
    reads_unwritten_argument(Func, EA_use, Reg, Index).

// Connect parameters that are passed from Func to Callee at argument Index
// without an explicit definition
subtype(
    Func,
    $Subtype(
        [$Global(Func), [$In(Index), nil]],
        [$Global(Callee), [$In(Index), nil]]
    ),
    0,
    "implicit-to-param"
) :-
    writes_implicit_argument(_, _, Func, Callee, _, Index).

// Connect parameters that are passed from Func to Callee that are defined at
// EA_def in register Register for argument Index.
subtype(
    Func,
    $Subtype(
        [$RegAt(Reg, EA_def), nil],
        [$Global(Callee), [$In(Index), nil]]
    ),
    EA_def,
    "register-to-param"
) :-
    writes_argument_before_call(Func, EA_def, Reg, Callee, Index).

// Connect writes to a return to the function's return path
subtype(
    Func,
    $Subtype(
        [$RegAt(Reg, EA_def), nil],
        [$Global(Func), [$Out(), nil]]
    ),
    EA_def,
    "register-to-return"
) :-
    writes_return_value(Func, EA_def),
    explicit_writes_register(EA_def, Reg).

// Give a subtype relation for the functions that have no returns for a cleaner
// type output from retypd
subtype(
    Func,
    $Subtype(
        [$Global(Func), [$Out(), nil]],
        [$Sink("void"), nil]
    ),
    0,
    "func-to-void"
) :-
    function_inference.function_entry_name(_, Func),
    !writes_return_value(Func, _).

subtype(
    Func,
    $Subtype(
        [$RegAt(Reg, EA), nil],
        [$Sink("call"), nil]
    ),
    EA,
    "register-called"
) :-
    reg_call(EA, Reg),
    block_instruction(EA, Block),
    function_inference.in_function(Block, Func_addr),
    function_inference.function_entry_name(Func_addr, Func).
